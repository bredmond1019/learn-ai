import { NextRequest, NextResponse } from 'next/server'
import createMiddleware from 'next-intl/middleware'
import { locales, defaultLocale, getLocaleFromHeaders, getLocaleFromPathname } from './lib/i18n'
// TODO: Enable rate limiting after fixing Edge Runtime compatibility
// import { checkRateLimit, getClientIdentifier } from '@/lib/rate-limit'

// Cookie name for locale preference
const LOCALE_COOKIE_NAME = 'NEXT_LOCALE'

// Create the next-intl middleware
const intlMiddleware = createMiddleware({
  locales,
  defaultLocale,
  localePrefix: 'always'
})

// Helper to apply security headers
function applySecurityHeaders(response: NextResponse): NextResponse {
  // Security Headers
  response.headers.set('X-DNS-Prefetch-Control', 'on')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  
  // HSTS (HTTP Strict Transport Security)
  response.headers.set(
    'Strict-Transport-Security',
    'max-age=31536000; includeSubDomains; preload'
  )

  // Content Security Policy
  const csp = [
    "default-src 'self'",
    "script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com",
    "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
    "font-src 'self' https://fonts.gstatic.com",
    "img-src 'self' data: https: blob:",
    "media-src 'self'",
    "object-src 'none'",
    "base-uri 'self'",
    "form-action 'self'",
    "frame-ancestors 'none'",
    "connect-src 'self' https://www.google-analytics.com",
    "worker-src 'self' blob:",
    "manifest-src 'self'"
  ].join('; ')

  response.headers.set('Content-Security-Policy', csp)
  
  return response
}

export async function middleware(request: NextRequest) {
  const pathname = request.nextUrl.pathname
  
  // Skip locale detection for API routes and static files
  if (
    pathname.startsWith('/api/') ||
    pathname.startsWith('/_next/') ||
    pathname.includes('.') ||
    pathname === '/favicon.ico' ||
    pathname === '/robots.txt' ||
    pathname === '/sitemap.xml' ||
    pathname === '/manifest.json'
  ) {
    const response = NextResponse.next()
    
    // Apply security headers
    applySecurityHeaders(response)
    
    // CORS Headers for API routes
    if (pathname.startsWith('/api/')) {
      response.headers.set('Access-Control-Allow-Origin', 'https://brandon-redmond.dev')
      response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
      response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization')
      response.headers.set('Access-Control-Max-Age', '86400')
      
      // Handle preflight requests
      if (request.method === 'OPTIONS') {
        return new Response(null, { status: 200, headers: response.headers })
      }

      // TODO: Re-enable rate limiting after fixing Edge Runtime compatibility
      // For now, we'll skip rate limiting to get a successful build
      // Rate limiting for API routes
      /*
      try {
        const identifier = getClientIdentifier(request)
        const config = {
          windowMs: 60 * 1000, // 1 minute window
          maxRequests: request.nextUrl.pathname === '/api/contact' ? 5 : 100, // Stricter limit for contact form
        }
        const { allowed, remaining, resetTime } = checkRateLimit(identifier, config)

        if (!allowed) {
          return new NextResponse(
            JSON.stringify({ 
              error: 'Rate limit exceeded',
              retryAfter: Math.ceil((resetTime - Date.now()) / 1000)
            }),
            {
              status: 429,
              headers: {
                'Content-Type': 'application/json',
                'X-RateLimit-Limit': config.maxRequests.toString(),
                'X-RateLimit-Remaining': remaining.toString(),
                'X-RateLimit-Reset': new Date(resetTime).toISOString(),
                'Retry-After': Math.ceil((resetTime - Date.now()) / 1000).toString()
              },
            }
          )
        }
      } catch (error) {
        console.error('Rate limiting error:', error)
        // Allow request to continue if rate limiting fails
      }
      */
    }

    // Cache control for static assets
    if (pathname.startsWith('/_next/static') || 
        pathname.startsWith('/images/') ||
        pathname.includes('.')) {
      response.headers.set('Cache-Control', 'public, max-age=31536000, immutable')
    }

    return response
  }

  // Handle locale routing for pages
  const currentLocale = getLocaleFromPathname(pathname)
  
  // If no locale in path, detect preferred locale
  if (!currentLocale) {
    // Check for locale cookie first
    const localeCookie = request.cookies.get(LOCALE_COOKIE_NAME)
    let detectedLocale = localeCookie?.value as typeof locales[number] | undefined
    
    // If no cookie or invalid locale, detect from Accept-Language header
    if (!detectedLocale || !locales.includes(detectedLocale)) {
      const acceptLanguage = request.headers.get('accept-language')
      detectedLocale = getLocaleFromHeaders(acceptLanguage)
    }
    
    // Redirect to the detected locale
    const url = new URL(request.url)
    url.pathname = `/${detectedLocale}${pathname}`
    
    const response = NextResponse.redirect(url)
    
    // Set locale cookie for future visits
    response.cookies.set(LOCALE_COOKIE_NAME, detectedLocale, {
      maxAge: 60 * 60 * 24 * 365, // 1 year
      sameSite: 'strict',
      secure: process.env.NODE_ENV === 'production'
    })
    
    // Apply security headers
    applySecurityHeaders(response)
    
    // Cache control for pages
    response.headers.set('Cache-Control', 'public, max-age=3600, s-maxage=3600')
    
    return response
  }
  
  // Let next-intl handle the request with locale
  const response = intlMiddleware(request)
  
  // Apply security headers
  applySecurityHeaders(response)
  
  // Cache control for pages
  if (!pathname.startsWith('/api/')) {
    response.headers.set('Cache-Control', 'public, max-age=3600, s-maxage=3600')
  }
  
  // Update locale cookie if it's different
  if (currentLocale) {
    const localeCookie = request.cookies.get(LOCALE_COOKIE_NAME)
    if (localeCookie?.value !== currentLocale) {
      response.cookies.set(LOCALE_COOKIE_NAME, currentLocale, {
        maxAge: 60 * 60 * 24 * 365, // 1 year
        sameSite: 'strict',
        secure: process.env.NODE_ENV === 'production'
      })
    }
  }

  return response
}

export const config = {
  matcher: [
    // Enable middleware on all routes except Next.js internals and static files
    '/((?!api|_next|_vercel|.*\\..*).*)',
    // Enable middleware on API routes
    '/api/(.*)'
  ]
}