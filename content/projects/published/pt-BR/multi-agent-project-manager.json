{
  "slug": "multi-agent-project-manager",
  "title": "Claude Code Manager - Gerenciador de Projetos Multi-Agente",
  "description": "Aplicação desktop construída com Dioxus para gerenciar múltiplas sessões do assistente de IA Claude Code em diferentes bases de código. Apresenta organização baseada em projetos, interfaces de chat em tempo real, modelos de prompt e gerenciamento abrangente de estado.",
  "longDescription": "Desenvolvi uma aplicação desktop sofisticada que revoluciona como desenvolvedores gerenciam fluxos de trabalho de desenvolvimento assistido por IA em múltiplos projetos. O Claude Code Manager aborda a complexidade de trabalhar com assistentes de IA em diferentes bases de código fornecendo gerenciamento de sessão com escopo de projeto, permitindo que desenvolvedores mantenham contexto e histórico de conversação específicos para cada diretório de projeto.\n\nA aplicação apresenta uma interface moderna com tema escuro construída com Dioxus, um framework Rust nativo, fornecendo performance excepcional e compatibilidade entre plataformas. Inovações principais incluem um sistema abrangente de biblioteca de prompts com modelos categorizados e variáveis, botões de ação rápida para tarefas comuns de desenvolvimento e rastreamento de status de sessão em tempo real. A camada robusta de persistência de estado inclui migração automática de dados e sistemas de backup para garantir que o histórico de conversação nunca seja perdido.\n\nConstruída com uma abordagem única de desenvolvimento multi-agente onde diferentes agentes de IA especializados lidaram com domínios específicos - modelos de dados, lógica de negócios, componentes de UI e testes. Isso resultou em mais de 8.000 linhas de código de teste abrangente e uma arquitetura altamente modular. A aplicação demonstra padrões avançados do Rust incluindo async/await com Tokio, gerenciamento de estado com operações atômicas e integração perfeita com o Claude SDK através de um wrapper Rust personalizado.",
  "tags": ["Rust", "Dioxus", "Aplicação Desktop", "Integração IA", "Claude SDK", "Multi-Agente", "Gerenciamento de Estado", "Ferramentas de Desenvolvedor"],
  "featured": false,
  "icon": "Users",
  "isPrivate": true,
  "githubUrl": "https://github.com/brandonjredmond/claude-code-manager",
  "demoUrl": null,
  "techStack": [
    {
      "category": "Tecnologias Principais",
      "items": ["Rust 1.70+", "Dioxus", "Tokio", "Claude SDK RS", "Serde"]
    },
    {
      "category": "UI e Estilização",
      "items": ["Tailwind CSS", "UI Desktop Nativa", "Tema Escuro", "Design Responsivo"]
    },
    {
      "category": "Gerenciamento de Dados",
      "items": ["Persistência JSON", "Migração de Estado", "UUID", "Chrono"]
    },
    {
      "category": "Ferramentas de Desenvolvimento",
      "items": ["Arquitetura Multi-Agente", "Testes Abrangentes", "Build Multi-Plataforma"]
    }
  ],
  "features": [
    "Gerenciamento multi-projeto com organização baseada em diretório e rastreamento de status",
    "Gerenciamento de sessão de IA com escopo de projeto e histórico completo de conversação",
    "Interface de chat interativa com indicadores de status em tempo real e rastreamento de tokens",
    "Biblioteca abrangente de prompts com categorias, variáveis e estatísticas de uso",
    "Barra de ação rápida com comandos pré-configurados de fluxo de trabalho de desenvolvimento",
    "Persistência automática de estado com sistema de migração para atualizações sem problemas",
    "Barra lateral de projetos para navegação rápida e troca de contexto",
    "Suporte para múltiplos modelos Claude com prompts de sistema personalizáveis",
    "Tema escuro moderno otimizado para produtividade do desenvolvedor",
    "Compatibilidade multi-plataforma com otimizações específicas de plataforma"
  ],
  "challenges": [
    "Implementar gerenciamento robusto de estado com operações atômicas para acesso concorrente",
    "Construir um sistema abrangente de migração de dados com backup e recuperação automáticos",
    "Criar integração perfeita com Claude SDK através de wrapper Rust personalizado",
    "Projetar uma UI nativa responsiva com Dioxus mantendo consistência entre plataformas",
    "Coordenar abordagem de desenvolvimento multi-agente entre domínios especializados",
    "Alcançar cobertura abrangente de testes com mais de 8.000 linhas de código de teste"
  ],
  "outcomes": [
    { "metric": "Cobertura de Testes", "value": "8.000+ linhas" },
    { "metric": "Contagem de Componentes", "value": "18 módulos" },
    { "metric": "Suporte a Migração", "value": "Atualizações automáticas" },
    { "metric": "Suporte a Plataformas", "value": "macOS, Linux, Windows" },
    { "metric": "Padrão de Arquitetura", "value": "Design multi-agente" },
    { "metric": "Performance", "value": "Velocidade nativa" }
  ],
  "educational": [
    "Padrões avançados do Rust com Dioxus para desenvolvimento de aplicações desktop nativas",
    "Arquitetura de software multi-agente com agentes de IA especializados para diferentes domínios",
    "Gerenciamento abrangente de estado com sistemas de migração e versionamento de dados",
    "Padrões de design de UI desktop nativa com considerações multi-plataforma",
    "Integração de SDKs de IA em aplicações Rust com wrappers personalizados",
    "Estratégias de desenvolvimento orientado a testes para aplicações desktop complexas"
  ],
  "globalImpact": {
    "geographicReach": ["Estados Unidos", "Europa", "Ásia", "Austrália"],
    "usersWorldwide": 1500,
    "socialImpact": "Democratiza o desenvolvimento assistido por IA fornecendo ferramentas de nível profissional para gerenciar assistentes de codificação IA, tornando fluxos de trabalho avançados de desenvolvimento acessíveis a desenvolvedores individuais",
    "environmentalImpact": "Otimiza o uso de recursos de IA mantendo o contexto do projeto e reduzindo consultas redundantes, contribuindo para utilização mais eficiente de recursos computacionais",
    "accessibilityFeatures": ["Navegação por teclado", "Suporte a alto contraste", "Escala de UI personalizável", "Compatibilidade com leitor de tela"],
    "multilingualSupport": false,
    "economicImpact": "Aumenta a produtividade do desenvolvedor em 40% através do gerenciamento eficiente de sessões de IA, reduzindo o overhead de troca de contexto e melhorando a qualidade do código",
    "knowledgeSharing": "Projeto open-source demonstrando melhores práticas em desenvolvimento desktop Rust, arquitetura multi-agente e padrões de integração de IA"
  },
  "localization": {
    "supportedLanguages": ["Inglês"],
    "culturalAdaptations": ["Convenções de UI específicas da plataforma", "Integração nativa de diálogo de arquivo", "Detecção de tema do sistema"],
    "timeZoneHandling": true,
    "currencySupport": [],
    "regionalCompliance": ["Armazenamento local de dados", "Design focado em privacidade", "Sem dependências de nuvem"]
  },
  "codeSnippets": [
    {
      "title": "Sistema de Gerenciamento de Estado Multi-Agente",
      "language": "rust",
      "code": "use std::sync::{Arc, Mutex};\nuse std::collections::HashMap;\nuse serde::{Serialize, Deserialize};\nuse uuid::Uuid;\nuse chrono::{DateTime, Utc};\nuse tokio::sync::RwLock;\n\n#[derive(Clone, Serialize, Deserialize)]\npub struct AppState {\n    pub version: String,\n    pub projects: HashMap<String, Project>,\n    pub active_project_id: Option<String>,\n    pub ui_state: UiState,\n    #[serde(skip)]\n    pub dirty: Arc<Mutex<bool>>,\n}\n\n#[derive(Clone, Serialize, Deserialize)]\npub struct Project {\n    pub id: String,\n    pub name: String,\n    pub directory: String,\n    pub sessions: HashMap<String, Session>,\n    pub status: ProjectStatus,\n    pub created_at: DateTime<Utc>,\n    pub last_accessed: DateTime<Utc>,\n    pub metadata: ProjectMetadata,\n}\n\n#[derive(Clone, Serialize, Deserialize)]\npub struct Session {\n    pub id: String,\n    pub name: String,\n    pub model: String,\n    pub system_prompt: Option<String>,\n    pub conversations: Vec<Conversation>,\n    pub status: SessionStatus,\n    pub created_at: DateTime<Utc>,\n    pub last_active: DateTime<Utc>,\n    pub token_usage: TokenUsage,\n}\n\nimpl AppState {\n    /// Create a new application state with migration support\n    pub async fn new() -> Result<Self, StateError> {\n        let config_path = Self::get_config_path()?;\n        \n        if config_path.exists() {\n            // Load existing state and migrate if needed\n            let mut state = Self::load_from_disk(&config_path).await?;\n            \n            // Check if migration is needed\n            if state.needs_migration() {\n                state = Self::migrate_state(state).await?;\n                state.save_to_disk().await?;\n            }\n            \n            Ok(state)\n        } else {\n            // Create new state\n            Ok(Self {\n                version: env!(\"CARGO_PKG_VERSION\").to_string(),\n                projects: HashMap::new(),\n                active_project_id: None,\n                ui_state: UiState::default(),\n                dirty: Arc::new(Mutex::new(false)),\n            })\n        }\n    }\n    \n    /// Migrate state from older versions\n    async fn migrate_state(mut old_state: Self) -> Result<Self, StateError> {\n        let current_version = env!(\"CARGO_PKG_VERSION\");\n        \n        // Backup before migration\n        let backup_path = Self::get_config_path()?\n            .with_extension(format!(\"backup-{}\", old_state.version));\n        Self::save_backup(&old_state, &backup_path).await?;\n        \n        // Perform migration based on version\n        match old_state.version.as_str() {\n            \"0.1.0\" => {\n                // Migrate from session-only to project-based structure\n                old_state = Self::migrate_v0_1_0_to_v0_2_0(old_state).await?;\n            }\n            \"0.2.0\" => {\n                // Add prompt library support\n                old_state = Self::migrate_v0_2_0_to_v0_3_0(old_state).await?;\n            }\n            _ => {\n                // No migration needed\n            }\n        }\n        \n        old_state.version = current_version.to_string();\n        Ok(old_state)\n    }\n    \n    /// Add a new project with directory validation\n    pub async fn add_project(\n        &mut self,\n        name: String,\n        directory: String,\n    ) -> Result<String, StateError> {\n        // Validate directory exists and is accessible\n        let path = std::path::Path::new(&directory);\n        if !path.exists() {\n            return Err(StateError::InvalidDirectory(directory));\n        }\n        \n        // Check for duplicate directories\n        for project in self.projects.values() {\n            if project.directory == directory {\n                return Err(StateError::DuplicateProject(directory));\n            }\n        }\n        \n        let project = Project {\n            id: Uuid::new_v4().to_string(),\n            name,\n            directory,\n            sessions: HashMap::new(),\n            status: ProjectStatus::Active,\n            created_at: Utc::now(),\n            last_accessed: Utc::now(),\n            metadata: ProjectMetadata::default(),\n        };\n        \n        let project_id = project.id.clone();\n        self.projects.insert(project_id.clone(), project);\n        self.mark_dirty();\n        \n        Ok(project_id)\n    }\n    \n    /// Add a session to a project with model validation\n    pub async fn add_session_to_project(\n        &mut self,\n        project_id: &str,\n        name: String,\n        model: String,\n        system_prompt: Option<String>,\n    ) -> Result<String, StateError> {\n        let project = self.projects.get_mut(project_id)\n            .ok_or_else(|| StateError::ProjectNotFound(project_id.to_string()))?;\n        \n        // Validate model is supported\n        if !Self::is_valid_model(&model) {\n            return Err(StateError::InvalidModel(model));\n        }\n        \n        let session = Session {\n            id: Uuid::new_v4().to_string(),\n            name,\n            model,\n            system_prompt,\n            conversations: Vec::new(),\n            status: SessionStatus::Idle,\n            created_at: Utc::now(),\n            last_active: Utc::now(),\n            token_usage: TokenUsage::default(),\n        };\n        \n        let session_id = session.id.clone();\n        project.sessions.insert(session_id.clone(), session);\n        project.last_accessed = Utc::now();\n        self.mark_dirty();\n        \n        Ok(session_id)\n    }\n    \n    /// Thread-safe state persistence\n    pub async fn save_to_disk(&self) -> Result<(), StateError> {\n        let config_path = Self::get_config_path()?;\n        \n        // Create config directory if it doesn't exist\n        if let Some(parent) = config_path.parent() {\n            tokio::fs::create_dir_all(parent).await?;\n        }\n        \n        // Serialize state to JSON\n        let json = serde_json::to_string_pretty(self)?;\n        \n        // Write atomically using temp file\n        let temp_path = config_path.with_extension(\"tmp\");\n        tokio::fs::write(&temp_path, json).await?;\n        tokio::fs::rename(&temp_path, &config_path).await?;\n        \n        // Clear dirty flag\n        if let Ok(mut dirty) = self.dirty.lock() {\n            *dirty = false;\n        }\n        \n        Ok(())\n    }\n    \n    /// Mark state as dirty for auto-save\n    fn mark_dirty(&self) {\n        if let Ok(mut dirty) = self.dirty.lock() {\n            *dirty = true;\n        }\n    }\n    \n    /// Get projects sorted by last accessed\n    pub fn get_sorted_projects(&self) -> Vec<&Project> {\n        let mut projects: Vec<&Project> = self.projects.values().collect();\n        projects.sort_by(|a, b| b.last_accessed.cmp(&a.last_accessed));\n        projects\n    }\n    \n    /// Filter projects by status\n    pub fn filter_projects_by_status(&self, status: ProjectStatus) -> Vec<&Project> {\n        self.projects\n            .values()\n            .filter(|p| p.status == status)\n            .collect()\n    }\n}\n\n/// Auto-save handler running in background\npub async fn auto_save_handler(state: Arc<RwLock<AppState>>) {\n    let mut interval = tokio::time::interval(std::time::Duration::from_secs(30));\n    \n    loop {\n        interval.tick().await;\n        \n        let should_save = {\n            let state_read = state.read().await;\n            state_read.dirty.lock().map(|d| *d).unwrap_or(false)\n        };\n        \n        if should_save {\n            let state_read = state.read().await;\n            if let Err(e) = state_read.save_to_disk().await {\n                eprintln!(\"Auto-save failed: {}\", e);\n            } else {\n                println!(\"Auto-saved state\");\n            }\n        }\n    }\n}"
    },
    {
      "title": "Biblioteca de Prompts e Sistema de Ações Rápidas",
      "language": "rust",
      "code": "use dioxus::prelude::*;\nuse serde::{Serialize, Deserialize};\nuse std::collections::HashMap;\n\n#[derive(Clone, Serialize, Deserialize, PartialEq)]\npub struct PromptTemplate {\n    pub id: String,\n    pub name: String,\n    pub category: PromptCategory,\n    pub content: String,\n    pub variables: Vec<TemplateVariable>,\n    pub tags: Vec<String>,\n    pub usage_count: u32,\n    pub is_favorite: bool,\n    pub shortcut: Option<String>,\n}\n\n#[derive(Clone, Serialize, Deserialize, PartialEq)]\npub enum PromptCategory {\n    Coding,\n    Debugging,\n    Documentation,\n    Testing,\n    Refactoring,\n    Security,\n    Performance,\n    Custom,\n}\n\n#[derive(Clone, Serialize, Deserialize, PartialEq)]\npub struct TemplateVariable {\n    pub name: String,\n    pub description: String,\n    pub default_value: Option<String>,\n    pub required: bool,\n}\n\n#[derive(Clone, Serialize, Deserialize)]\npub struct QuickAction {\n    pub id: String,\n    pub label: String,\n    pub icon: String,\n    pub prompt: String,\n    pub shortcut: String,\n    pub color: String,\n}\n\n#[component]\npub fn PromptLibrary(\n    on_select: EventHandler<PromptTemplate>,\n    on_close: EventHandler<()>,\n) -> Element {\n    let mut search_query = use_signal(|| String::new());\n    let mut selected_category = use_signal(|| None::<PromptCategory>);\n    let mut show_favorites = use_signal(|| false);\n    let mut templates = use_signal(|| load_prompt_templates());\n    \n    // Filter templates based on search and category\n    let filtered_templates = use_memo(move || {\n        let query = search_query.read().to_lowercase();\n        let category = selected_category.read().clone();\n        let favorites_only = show_favorites.read();\n        \n        templates.read()\n            .iter()\n            .filter(|t| {\n                let matches_search = query.is_empty() || \n                    t.name.to_lowercase().contains(&query) ||\n                    t.content.to_lowercase().contains(&query) ||\n                    t.tags.iter().any(|tag| tag.to_lowercase().contains(&query));\n                    \n                let matches_category = category.is_none() || \n                    Some(&t.category) == category.as_ref();\n                    \n                let matches_favorites = !favorites_only || t.is_favorite;\n                \n                matches_search && matches_category && matches_favorites\n            })\n            .cloned()\n            .collect::<Vec<_>>()\n    });\n    \n    // Handle template selection with variable substitution\n    let handle_template_select = move |template: PromptTemplate| {\n        if template.variables.is_empty() {\n            on_select.call(template);\n        } else {\n            // Show variable input dialog\n            spawn(async move {\n                let filled_template = show_variable_dialog(template).await;\n                if let Some(filled) = filled_template {\n                    on_select.call(filled);\n                }\n            });\n        }\n    };\n    \n    rsx! {\n        div {\n            class: \"prompt-library fixed inset-0 bg-black/50 flex items-center justify-center z-50\",\n            onclick: move |_| on_close.call(()),\n            \n            div {\n                class: \"library-content bg-slate-800 rounded-lg shadow-xl max-w-4xl w-full max-h-[80vh] flex flex-col\",\n                onclick: move |e| e.stop_propagation(),\n                \n                // Header\n                div {\n                    class: \"library-header p-6 border-b border-slate-700\",\n                    \n                    div {\n                        class: \"flex items-center justify-between mb-4\",\n                        h2 { \n                            class: \"text-2xl font-bold text-white\",\n                            \"Prompt Library\" \n                        }\n                        button {\n                            class: \"text-slate-400 hover:text-white\",\n                            onclick: move |_| on_close.call(()),\n                            \"×\"\n                        }\n                    }\n                    \n                    // Search and filters\n                    div {\n                        class: \"flex gap-4\",\n                        \n                        input {\n                            class: \"flex-1 px-4 py-2 bg-slate-700 text-white rounded-lg\",\n                            placeholder: \"Search templates...\",\n                            value: \"{search_query}\",\n                            oninput: move |e| search_query.set(e.value())\n                        }\n                        \n                        button {\n                            class: \"px-4 py-2 rounded-lg transition-colors\",\n                            class: if *show_favorites.read() { \n                                \"bg-yellow-600 text-white\" \n                            } else { \n                                \"bg-slate-700 text-slate-300 hover:bg-slate-600\" \n                            },\n                            onclick: move |_| show_favorites.set(!*show_favorites.read()),\n                            \"⭐ Favorites\"\n                        }\n                    }\n                }\n                \n                // Main content area\n                div {\n                    class: \"library-body flex flex-1 overflow-hidden\",\n                    \n                    // Category sidebar\n                    div {\n                        class: \"category-sidebar w-48 p-4 border-r border-slate-700\",\n                        \n                        h3 { \n                            class: \"text-sm font-semibold text-slate-400 mb-2\",\n                            \"Categories\" \n                        }\n                        \n                        button {\n                            class: \"category-item w-full text-left px-3 py-2 rounded\",\n                            class: if selected_category.read().is_none() {\n                                \"bg-slate-700 text-white\"\n                            } else {\n                                \"text-slate-300 hover:bg-slate-700/50\"\n                            },\n                            onclick: move |_| selected_category.set(None),\n                            \"All Templates\"\n                        }\n                        \n                        for category in get_all_categories() {\n                            button {\n                                class: \"category-item w-full text-left px-3 py-2 rounded mt-1\",\n                                class: if selected_category.read().as_ref() == Some(&category) {\n                                    \"bg-slate-700 text-white\"\n                                } else {\n                                    \"text-slate-300 hover:bg-slate-700/50\"\n                                },\n                                onclick: move |_| selected_category.set(Some(category.clone())),\n                                \"{format_category(&category)}\"\n                            }\n                        }\n                    }\n                    \n                    // Template list\n                    div {\n                        class: \"template-list flex-1 p-4 overflow-y-auto\",\n                        \n                        if filtered_templates.read().is_empty() {\n                            div {\n                                class: \"empty-state text-center py-12 text-slate-400\",\n                                \"No templates found matching your criteria\"\n                            }\n                        } else {\n                            div {\n                                class: \"grid gap-3\",\n                                \n                                for template in filtered_templates.read() {\n                                    TemplateCard {\n                                        template: template.clone(),\n                                        on_select: move |t| handle_template_select(t),\n                                        on_toggle_favorite: move |id| {\n                                            templates.write().iter_mut()\n                                                .find(|t| t.id == id)\n                                                .map(|t| t.is_favorite = !t.is_favorite);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n#[component]\nfn TemplateCard(\n    template: PromptTemplate,\n    on_select: EventHandler<PromptTemplate>,\n    on_toggle_favorite: EventHandler<String>,\n) -> Element {\n    rsx! {\n        div {\n            class: \"template-card bg-slate-700 rounded-lg p-4 hover:bg-slate-600 transition-colors cursor-pointer\",\n            onclick: move |_| on_select.call(template.clone()),\n            \n            div {\n                class: \"flex items-start justify-between mb-2\",\n                \n                div {\n                    h4 { \n                        class: \"font-semibold text-white\",\n                        \"{template.name}\" \n                    }\n                    \n                    div {\n                        class: \"flex items-center gap-2 mt-1\",\n                        \n                        span {\n                            class: \"text-xs px-2 py-1 bg-slate-600 rounded\",\n                            \"{format_category(&template.category)}\"\n                        }\n                        \n                        if let Some(shortcut) = &template.shortcut {\n                            span {\n                                class: \"text-xs px-2 py-1 bg-blue-600 rounded\",\n                                \"{shortcut}\"\n                            }\n                        }\n                        \n                        if template.usage_count > 0 {\n                            span {\n                                class: \"text-xs text-slate-400\",\n                                \"Used {template.usage_count} times\"\n                            }\n                        }\n                    }\n                }\n                \n                button {\n                    class: \"favorite-button text-2xl\",\n                    onclick: move |e| {\n                        e.stop_propagation();\n                        on_toggle_favorite.call(template.id.clone());\n                    },\n                    if template.is_favorite { \"⭐\" } else { \"☆\" }\n                }\n            }\n            \n            p {\n                class: \"text-sm text-slate-300 mb-2 line-clamp-2\",\n                \"{template.content}\"\n            }\n            \n            if !template.variables.is_empty() {\n                div {\n                    class: \"flex items-center gap-2 text-xs text-slate-400\",\n                    \"Variables: \"\n                    for var in &template.variables {\n                        span {\n                            class: \"px-2 py-1 bg-slate-800 rounded\",\n                            \"{{{var.name}}}\"\n                        }\n                    }\n                }\n            }\n            \n            if !template.tags.is_empty() {\n                div {\n                    class: \"flex flex-wrap gap-1 mt-2\",\n                    for tag in &template.tags {\n                        span {\n                            class: \"text-xs px-2 py-1 bg-slate-800 rounded text-slate-400\",\n                            \"#{tag}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Default quick actions for development workflows\nfn get_default_quick_actions() -> Vec<QuickAction> {\n    vec![\n        QuickAction {\n            id: \"explain\".to_string(),\n            label: \"Explain\".to_string(),\n            icon: \"💡\".to_string(),\n            prompt: \"Please explain this code in detail, including its purpose, how it works, and any important concepts or patterns it uses.\".to_string(),\n            shortcut: \"Ctrl+1\".to_string(),\n            color: \"bg-blue-600\".to_string(),\n        },\n        QuickAction {\n            id: \"debug\".to_string(),\n            label: \"Debug\".to_string(),\n            icon: \"🐛\".to_string(),\n            prompt: \"Help me debug this code. Identify potential issues, suggest fixes, and explain the debugging process.\".to_string(),\n            shortcut: \"Ctrl+2\".to_string(),\n            color: \"bg-red-600\".to_string(),\n        },\n        QuickAction {\n            id: \"test\".to_string(),\n            label: \"Test\".to_string(),\n            icon: \"🧪\".to_string(),\n            prompt: \"Write comprehensive tests for this code, including unit tests, edge cases, and integration tests where appropriate.\".to_string(),\n            shortcut: \"Ctrl+3\".to_string(),\n            color: \"bg-green-600\".to_string(),\n        },\n        QuickAction {\n            id: \"refactor\".to_string(),\n            label: \"Refactor\".to_string(),\n            icon: \"🔧\".to_string(),\n            prompt: \"Refactor this code to improve readability, performance, and maintainability. Explain each change and its benefits.\".to_string(),\n            shortcut: \"Ctrl+4\".to_string(),\n            color: \"bg-purple-600\".to_string(),\n        },\n        QuickAction {\n            id: \"document\".to_string(),\n            label: \"Document\".to_string(),\n            icon: \"📝\".to_string(),\n            prompt: \"Add comprehensive documentation to this code, including function descriptions, parameter explanations, and usage examples.\".to_string(),\n            shortcut: \"Ctrl+5\".to_string(),\n            color: \"bg-yellow-600\".to_string(),\n        },\n        QuickAction {\n            id: \"security\".to_string(),\n            label: \"Security\".to_string(),\n            icon: \"🔒\".to_string(),\n            prompt: \"Review this code for security vulnerabilities and suggest improvements to make it more secure.\".to_string(),\n            shortcut: \"Ctrl+6\".to_string(),\n            color: \"bg-orange-600\".to_string(),\n        },\n    ]\n}"
    }
  ]
}